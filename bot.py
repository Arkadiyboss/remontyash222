import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import smtplib
from email.message import EmailMessage
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASS = os.getenv("EMAIL_PASS")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))
main_kb.add(KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ '–†–µ–º–æ–Ω—Ç—è—à'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: types.Message):
    await message.answer("‚ùì –ú—ã —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º: —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏ –∏ –¥—Ä—É–≥–æ–µ.\nüìç –ê–¥—Ä–µ—Å: –•–∞–±–∞—Ä–æ–≤—Å–∫, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. –ö–æ–ª–æ—Ç—É—à–∫–∏–Ω–∞.\nüïô –†–∞–±–æ—Ç–∞–µ–º: –ü–Ω‚Äì–ü—Ç —Å 10:00 –¥–æ 19:00.")

@dp.message_handler(lambda m: m.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_info(message: types.Message):
    await message.answer("üì© –ü–æ—á—Ç–∞: abc123321@gmail.com\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 999 99 99")

user_data = {}

@dp.message_handler(lambda m: m.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def request_name(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    user_data[message.from_user.id] = {}
    dp.register_message_handler(get_name, lambda m: True, state=None, content_types=types.ContentTypes.TEXT)

async def get_name(message: types.Message):
    user_data[message.from_user.id]['name'] = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    dp.register_message_handler(get_phone, lambda m: True, state=None, content_types=types.ContentTypes.TEXT)

async def get_phone(message: types.Message):
    user_data[message.from_user.id]['phone'] = message.text
    name = user_data[message.from_user.id]['name']
    phone = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    send_email(name, phone)
    user_data.pop(message.from_user.id, None)

def send_email(name, phone):
    msg = EmailMessage()
    msg.set_content(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    msg['Subject'] = '–ó–∞—è–≤–∫–∞ —Å Telegram-–±–æ—Ç–∞'
    msg['From'] = EMAIL_USER
    msg['To'] = ADMIN_EMAIL
    try:
        with smtplib.SMTP_SSL('smtp.yandex.ru', 465) as smtp:
            smtp.login(EMAIL_USER, EMAIL_PASS)
            smtp.send_message(msg)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", e)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
